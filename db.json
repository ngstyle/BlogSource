{"meta":{"version":1,"warehouse":"1.0.2"},"models":{"Asset":[{"_id":"themes/jacman/source/js/totop.js","path":"js/totop.js","modified":1},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":1},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":1},{"_id":"themes/jacman/source/js/gallery.js","path":"js/gallery.js","modified":1},{"_id":"themes/jacman/source/img/scrollup.png","path":"img/scrollup.png","modified":1},{"_id":"themes/jacman/source/img/logo.svg","path":"img/logo.svg","modified":1},{"_id":"themes/jacman/source/img/logo.png","path":"img/logo.png","modified":1},{"_id":"themes/jacman/source/img/jacman.jpg","path":"img/jacman.jpg","modified":1},{"_id":"themes/jacman/source/img/favicon.ico","path":"img/favicon.ico","modified":1},{"_id":"themes/jacman/source/img/cc-zero.svg","path":"img/cc-zero.svg","modified":1},{"_id":"themes/jacman/source/img/cc-by.svg","path":"img/cc-by.svg","modified":1},{"_id":"themes/jacman/source/img/cc-by-sa.svg","path":"img/cc-by-sa.svg","modified":1},{"_id":"themes/jacman/source/img/cc-by-nd.svg","path":"img/cc-by-nd.svg","modified":1},{"_id":"themes/jacman/source/img/cc-by-nc.svg","path":"img/cc-by-nc.svg","modified":1},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","path":"img/cc-by-nc-sa.svg","modified":1},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","path":"img/cc-by-nc-nd.svg","modified":1},{"_id":"themes/jacman/source/img/banner.jpg","path":"img/banner.jpg","modified":1},{"_id":"themes/jacman/source/img/author.jpg","path":"img/author.jpg","modified":1},{"_id":"themes/jacman/source/font/fontdiao.woff","path":"font/fontdiao.woff","modified":1},{"_id":"themes/jacman/source/font/fontdiao.ttf","path":"font/fontdiao.ttf","modified":1},{"_id":"themes/jacman/source/font/fontdiao.svg","path":"font/fontdiao.svg","modified":1},{"_id":"themes/jacman/source/font/fontdiao.eot","path":"font/fontdiao.eot","modified":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":1},{"_id":"themes/jacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1},{"_id":"themes/jacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1},{"_id":"themes/jacman/source/css/style.styl","path":"css/style.styl","modified":1}],"Cache":[{"_id":"source/_posts/handler-detail.md","shasum":"30dceb460f3e958328a127ef9c5307622422ea95","modified":1448288767677},{"_id":"source/_posts/just-now.md","shasum":"88745eefe29c75de6bd9f9bb6ce0f38d1f52419d","modified":1448288767679},{"_id":"source/about/index.md","shasum":"56c9212daf58bdf084119d58c2570766bfd0ff98","modified":1448288767706},{"_id":"source/_posts/stickylayout.md","shasum":"40d513313c90bdfbbd8ef12a11d892214457d75b","modified":1448288767684},{"_id":"source/categories/index.md","shasum":"0502d74d0c62add87541cc327aea9c78ca911c3e","modified":1448288767702},{"_id":"source/search/index.md","shasum":"9d32eb480fc44814e7c5c5122665626c3fa0fdc9","modified":1448288767698},{"_id":"source/tags/index.md","shasum":"a248f366f795bbd623da6105282911c254c179cc","modified":1448288767693},{"_id":"themes/jacman/LICENSE","shasum":"d8780b41bab4b87bdd21eca444cae11af72617f4","modified":1448288760077},{"_id":"themes/jacman/README.md","shasum":"ea52694ca940f7a8c0d9f9be0d653904dbe53819","modified":1448288760085},{"_id":"themes/jacman/README_zh.md","shasum":"8cc4fc09bae6bb7a77f5405cca53c1581c39279d","modified":1448288760088},{"_id":"themes/jacman/_config.yml","shasum":"a1de352d844db16cd8300347ab03c6eec2ba3f26","modified":1448288760089},{"_id":"themes/jacman/languages/default.yml","shasum":"32efe172560cf8a50884d5d5237d654fb59f7df4","modified":1448288767514},{"_id":"themes/jacman/languages/zh-CN.yml","shasum":"afe99ffe436eabea1b6476e8dbd87c0797609afb","modified":1448288767520},{"_id":"themes/jacman/languages/zh-TW.yml","shasum":"7b83cc0450a68fc8b9d723ecc37d831a0c18c6ea","modified":1448288767523},{"_id":"themes/jacman/layout/_partial/after_footer.ejs","shasum":"8173a653861d4fae67b827aaf44a6f1c75bd3459","modified":1448288767122},{"_id":"themes/jacman/layout/_partial/analytics.ejs","shasum":"5cb06f9d23b92815ff77766b894421e1037505f8","modified":1448288767129},{"_id":"themes/jacman/layout/_partial/archive.ejs","shasum":"90502fc2f5b0a5681a6c6588a9ed6ad297e32890","modified":1448288767138},{"_id":"themes/jacman/layout/_partial/article.ejs","shasum":"00c00b4a961ac1f7bc8ee688ce134fe0c454edc6","modified":1448288767142},{"_id":"themes/jacman/layout/_partial/article_row.ejs","shasum":"2c1f1edfeaebaafe4265d58e0b8110e71673da40","modified":1448288767233},{"_id":"themes/jacman/layout/_partial/categories.ejs","shasum":"2b77ff6cbc8571cab27c3bdc4ad51a79510bbca2","modified":1448288767235},{"_id":"themes/jacman/layout/_partial/footer.ejs","shasum":"b97f94b13b545af19e3b381732d4a37e91368ef8","modified":1448288767317},{"_id":"themes/jacman/layout/_partial/head.ejs","shasum":"210bb4c1ec77d998dfd93baeb4e3a0b46a925cd1","modified":1448288767353},{"_id":"themes/jacman/layout/_partial/header.ejs","shasum":"795435cc84c46a18e4ac597435a81f66eb86b0c4","modified":1448288767366},{"_id":"themes/jacman/layout/_partial/mathjax.ejs","shasum":"5636df1f2b6a8d02986d866e3824ec60430046e6","modified":1448288767369},{"_id":"themes/jacman/layout/_partial/pagination.ejs","shasum":"6cf37f844f150af4bbe212610da61e5140317de9","modified":1448288767383},{"_id":"themes/jacman/layout/_partial/post/article.ejs","shasum":"c01220f0af629f9e23bf125bdc1beef8afc206ef","modified":1448288767431},{"_id":"themes/jacman/layout/_partial/post/catetags.ejs","shasum":"20349dcde9942885d5eae1c302ef26b1b8484f3f","modified":1448288767437},{"_id":"themes/jacman/layout/_partial/post/comment.ejs","shasum":"9db7847461cf8b10a9cd5434deb690c6b26af6f1","modified":1448288767444},{"_id":"themes/jacman/layout/_partial/post/footer.ejs","shasum":"5b9f5ee6a2cc8bd557550bbdc1a03d237681114e","modified":1448288767447},{"_id":"themes/jacman/layout/_partial/post/gallery.ejs","shasum":"fc23ef9b5a412e05436f68ff47146b860d2d4225","modified":1448288767452},{"_id":"themes/jacman/layout/_partial/post/header.ejs","shasum":"351e771b1b38244560fc52cf60d91263d3d63eef","modified":1448288767461},{"_id":"themes/jacman/layout/_partial/post/jiathis.ejs","shasum":"12b7360326691ebf06bea5d7ee4d54c41f64e2ec","modified":1448288767474},{"_id":"themes/jacman/layout/_partial/post/pagination.ejs","shasum":"091512e19cfcf5bde2a699b211f99874f26587ad","modified":1448288767505},{"_id":"themes/jacman/layout/_partial/search.ejs","shasum":"732fcd909f6dac557629206dc7e93a7083cda084","modified":1448288767389},{"_id":"themes/jacman/layout/_partial/sidebar.ejs","shasum":"846d96ff73409b9a8b34f3cab691821096c03e1d","modified":1448288767391},{"_id":"themes/jacman/layout/_partial/tags.ejs","shasum":"c5c858742b29e6364da2e1d098e7d6cd8cef038f","modified":1448288767401},{"_id":"themes/jacman/layout/_partial/tinysou_search.ejs","shasum":"67a55a4d94cca2db11a2636f1f2c92c208688b14","modified":1448288767415},{"_id":"themes/jacman/layout/_partial/totop.ejs","shasum":"224d078ba1f2c33c52d5e867af71c5fe9f1bdf45","modified":1448288767424},{"_id":"themes/jacman/layout/_widget/archive.ejs","shasum":"b82d7fb0d1119738a9f9bb747d415e8c99e454ae","modified":1448288760937},{"_id":"themes/jacman/layout/_widget/category.ejs","shasum":"2c1b9ac7666d7d5b9aaf8f33588e10451c4b7841","modified":1448288760943},{"_id":"themes/jacman/layout/_widget/douban.ejs","shasum":"e0b545c996fac814885861a01113387ad8469ac2","modified":1448288749367},{"_id":"themes/jacman/layout/_widget/links.ejs","shasum":"bd73be669ddc47e1daab38736d1cecc3f37662e2","modified":1448288749503},{"_id":"themes/jacman/layout/_widget/rss.ejs","shasum":"ebfb11bdd603cd6e4dcf3949cc52e38009615c25","modified":1448288749696},{"_id":"themes/jacman/layout/_widget/tag.ejs","shasum":"43b1c29fea51f849ec0bf85a6d91fe0507f01503","modified":1448288749861},{"_id":"themes/jacman/layout/_widget/tagcloud.ejs","shasum":"317d420f5448c7452290e37f0ed8516cb73f4068","modified":1448288750087},{"_id":"themes/jacman/layout/_widget/time.ejs","shasum":"685efbda95ecb8d345bfe2b563e932f9275031c3","modified":1448288750295},{"_id":"themes/jacman/layout/_widget/weibo.ejs","shasum":"ff7db098608ba48752964cc67a51a04965ea927e","modified":1448288750648},{"_id":"themes/jacman/layout/archive.ejs","shasum":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1448288760884},{"_id":"themes/jacman/layout/category.ejs","shasum":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1448288760885},{"_id":"themes/jacman/layout/index.ejs","shasum":"b832b280ec0a2b741e73a2300f219f0075c99278","modified":1448288760895},{"_id":"themes/jacman/layout/layout.ejs","shasum":"c7efae2baf77ea224aabb144832671a5044eb08d","modified":1448288760905},{"_id":"themes/jacman/layout/page.ejs","shasum":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1448288760911},{"_id":"themes/jacman/layout/post.ejs","shasum":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1448288760913},{"_id":"themes/jacman/layout/tag.ejs","shasum":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1448288760927},{"_id":"themes/jacman/scripts/fancybox.js","shasum":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1448288760868},{"_id":"themes/jacman/source/css/_base/code.styl","shasum":"0eb8825710b573f3f444c4c90933211bfe531078","modified":1448288760852},{"_id":"themes/jacman/source/css/_base/font.styl","shasum":"5699c270be7b28c5b2c36f453317ccd42789fd3d","modified":1448288760855},{"_id":"themes/jacman/source/css/_base/public.styl","shasum":"657ad4c267490bd3b9ac98b5f864ecddb7025586","modified":1448288760858},{"_id":"themes/jacman/source/css/_base/variable.styl","shasum":"0b7d517e12102a99be82bc1a9104bb6bfd4ca10b","modified":1448288760862},{"_id":"themes/jacman/source/css/_partial/article.styl","shasum":"0bcb684376fcbf4be42d1df5dd02c395760f7ffb","modified":1448288760813},{"_id":"themes/jacman/source/css/_partial/aside.styl","shasum":"6c303908a7af7234ba032ef9e1189b68ae492f22","modified":1448288760816},{"_id":"themes/jacman/source/css/_partial/duoshuo.styl","shasum":"3ec423b734639614fbd11ec2c3445d3a03f5231d","modified":1448288760822},{"_id":"themes/jacman/source/css/_partial/footer.styl","shasum":"0300d7d289eceb3933c1eebf38f8d10f425c1128","modified":1448288760833},{"_id":"themes/jacman/source/css/_partial/gallery.styl","shasum":"75843d727319b1d07ad4b8c2e969036ce0d4f362","modified":1448288760836},{"_id":"themes/jacman/source/css/_partial/header.styl","shasum":"f1ae52a4f41d4cfdd66cb186b0329af904fead4f","modified":1448288760838},{"_id":"themes/jacman/source/css/_partial/helper.styl","shasum":"bdf04e4b4521a80e883173a77be0ff772277a4a1","modified":1448288760840},{"_id":"themes/jacman/source/css/_partial/index.styl","shasum":"d5a3046587f42703224ac3b761e80baab35d4ccc","modified":1448288760846},{"_id":"themes/jacman/source/css/_partial/totop.styl","shasum":"b48360e757d501027b7dbe093859d03795476930","modified":1448288760850},{"_id":"themes/jacman/source/css/style.styl","shasum":"98019eb8d70618259928c3472f9b17568848c794","modified":1448288760808},{"_id":"themes/jacman/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1448288760714},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1448288760722},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1448288760734},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1448288760736},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1448288760750},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1448288760751},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1448288760776},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"6394c48092085788a8c0ef72670b0652006231a1","modified":1448288760779},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1448288760793},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1448288760794},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1448288760801},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1448288760807},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","shasum":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1448288760754},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","shasum":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1448288760767},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","shasum":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1448288760772},{"_id":"themes/jacman/source/font/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1448288760669},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","shasum":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1448288760497},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","shasum":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1448288760548},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","shasum":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1448288760556},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1448288760560},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1448288760660},{"_id":"themes/jacman/source/font/fontdiao.eot","shasum":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1448288760675},{"_id":"themes/jacman/source/font/fontdiao.ttf","shasum":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1448288760700},{"_id":"themes/jacman/source/font/fontdiao.woff","shasum":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1448288760706},{"_id":"themes/jacman/source/img/author.jpg","shasum":"3e9199d5cd3ec77cbfc849791ce311a697330cc3","modified":1448288760364},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","shasum":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1448288760376},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","shasum":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1448288760381},{"_id":"themes/jacman/source/img/cc-by-nc.svg","shasum":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1448288760441},{"_id":"themes/jacman/source/img/cc-by-nd.svg","shasum":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1448288760443},{"_id":"themes/jacman/source/img/cc-by-sa.svg","shasum":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1448288760446},{"_id":"themes/jacman/source/img/cc-zero.svg","shasum":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1448288760463},{"_id":"themes/jacman/source/img/cc-by.svg","shasum":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1448288760462},{"_id":"themes/jacman/source/img/favicon.ico","shasum":"2d22a3e0c7905a894e832c831dd91c29c209c7a5","modified":1448288760465},{"_id":"themes/jacman/source/img/jacman.jpg","shasum":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1448288760472},{"_id":"themes/jacman/source/img/logo.png","shasum":"82b44f84fd5d650ac6497093acf89252ee3c4bcc","modified":1448288760479},{"_id":"themes/jacman/source/img/logo.svg","shasum":"85aa31ebe543572b4f9debd6c5f99271d89b5f30","modified":1448288760483},{"_id":"themes/jacman/source/img/scrollup.png","shasum":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1448288760486},{"_id":"themes/jacman/source/js/gallery.js","shasum":"735a714e54f0ac229f292a90df3a1f882904f6c7","modified":1448288760102},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","shasum":"28ef4346743a60c896a9ae492a544c0854904350","modified":1448288760306},{"_id":"themes/jacman/source/js/totop.js","shasum":"48648ec9c86e9ab491831e5a029e6f8864934149","modified":1448288760336},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","shasum":"739808e56a56e10a03bc93d03eb55abd19590942","modified":1448288760504},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1448288760631},{"_id":"themes/jacman/source/font/fontdiao.svg","shasum":"50e0247e9d39756843b7e4f720503b37bfb6154b","modified":1448288760681},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","shasum":"cd981db035ec1b6f502fca78fd394c5bd438aba1","modified":1448288760213},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","shasum":"a275426daefd3716c53561fad121d258a7f05b47","modified":1448288760627},{"_id":"themes/jacman/source/img/banner.jpg","shasum":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1448288760369}],"Category":[{"name":"Android","_id":"cihc1yg2z0001nsc02ahoopy9"},{"name":"心路历程","_id":"cihc1yg4l000hnsc037fi2hu8"}],"Data":[],"Page":[{"layout":"tags","title":"tags","_content":"","source":"tags/index.md","raw":"layout: tags\ntitle: tags\n---","date":"2015-11-23T14:26:07.693Z","updated":"2015-11-23T14:26:07.693Z","path":"tags/index.html","comments":1,"_id":"cihc1yg4b0007nsc071ngotr0"},{"layout":"search","title":"search","_content":"","source":"search/index.md","raw":"layout: search\ntitle: search\n---","date":"2015-11-23T14:26:07.698Z","updated":"2015-11-23T14:26:07.698Z","path":"search/index.html","comments":1,"_id":"cihc1yg4d0008nsc0x49rxj18"},{"layout":"categories","title":"categories","_content":"","source":"categories/index.md","raw":"layout: categories\ntitle: categories\n---","date":"2015-11-23T14:26:07.702Z","updated":"2015-11-23T14:26:07.702Z","path":"categories/index.html","comments":1,"_id":"cihc1yg4e0009nsc0i88jpczn"},{"title":"about","date":"2015-06-05T07:15:47.000Z","tags":null,"_content":"\n天蝎座\n\n安卓开发\n\n不同程度强迫症，完美主义","source":"about/index.md","raw":"title: about\ndate: 2015-06-05 15:15:47\ntags:\n---\n\n天蝎座\n\n安卓开发\n\n不同程度强迫症，完美主义","updated":"2015-11-23T14:26:07.706Z","path":"about/index.html","comments":1,"layout":"page","_id":"cihc1yg4f000ansc0oygtjcmo"}],"Post":[{"title":"Android Handler详解","date":"2015-06-10T15:00:49.000Z","_content":"### Android为什么要设计只能通过Handler机制更新UI？\n\n最根本的问题就是解决多线程并发问题，假设如果在一个Activity当中，有多个线程去更新UI,并且没有加锁机制，那将造成界面更新错乱。倘若如果对更新UI的操作都进行加锁处理又将导致性能的下降。\n\n处于对以上问题的考虑，android 给我们提供了一套UI更新的机制，我们只需遵循这样的机制就可以了，不用担心多线程的问题，更新UI的操作都是在主线程的消息队列中去轮询处理的。\n\n### Handler 原理是什么？\nAndroid上一个应用的入口是ActivityThread，和普通的java类一样，入口是一个main方法。在其中会给我们创建一个Looper，创建Looper的过程中会创建一个MessageQueue对象。\n<!-- more -->\n> ActivityThread main()方法\n```java\npublic static void main(String[] args) {  \n        SamplingProfilerIntegration.start();  \n  \n        CloseGuard.setEnabled(false);  \n  \n        Environment.initForCurrentUser();  \n  \n        // Set the reporter for event logging in libcore  \n        EventLogger.setReporter(new EventLoggingReporter());  \n  \n        Process.setArgV0(\"<pre-initialized>\");  \n  \n        Looper.prepareMainLooper();  \n  \n        // 创建ActivityThread实例  \n        ActivityThread thread = new ActivityThread();  \n        thread.attach(false);  \n  \n        if (sMainThreadHandler == null) {  \n            sMainThreadHandler = thread.getHandler();  \n        }  \n  \n        AsyncTask.init();  \n  \n        if (false) {  \n            Looper.myLooper().setMessageLogging(new LogPrinter(Log.DEBUG, \"ActivityThread\"));  \n        }  \n  \n        Looper.loop();  \n  \n        throw new RuntimeException(\"Main thread loop unexpectedly exited\");  \n    }  \n}  \n```\n\n> Looper\n```java\n    public static void prepareMainLooper() {\n        prepare(false);\n        synchronized (Looper.class) {\n            if (sMainLooper != null) {\n                throw new IllegalStateException(\"The main Looper has already been prepared.\");\n            }\n            sMainLooper = myLooper();\n        }\n    }\n    \n    private static void prepare(boolean quitAllowed) {\n        if (sThreadLocal.get() != null) {\n            throw new RuntimeException(\"Only one Looper may be created per thread\");\n        }\n        // 创建Looper对象\n        sThreadLocal.set(new Looper(quitAllowed));\n    }\n    \n    private Looper(boolean quitAllowed) {\n        // 创建MessageQueue 对象\n        mQueue = new MessageQueue(quitAllowed);\n        mRun = true;\n        mThread = Thread.currentThread();\n    }\n    \n    public static Looper myLooper() {\n        return sThreadLocal.get();\n    }\n    \n    public static void loop() {\n        final Looper me = myLooper();\n        if (me == null) {\n            throw new RuntimeException(\"No Looper; Looper.prepare() wasn't called on this thread.\");\n        }\n        final MessageQueue queue = me.mQueue;\n\n        // Make sure the identity of this thread is that of the local process,\n        // and keep track of what that identity token actually is.\n        Binder.clearCallingIdentity();\n        final long ident = Binder.clearCallingIdentity();\n\n        for (;;) {\n            Message msg = queue.next(); // might block\n            if (msg == null) {\n                // No message indicates that the message queue is quitting.\n                return;\n            }\n\n            // This must be in a local variable, in case a UI event sets the logger\n            Printer logging = me.mLogging;\n            if (logging != null) {\n                logging.println(\">>>>> Dispatching to \" + msg.target + \" \" +\n                        msg.callback + \": \" + msg.what);\n            }\n\n            // msg 回传给自己\n            msg.target.dispatchMessage(msg);\n\n            if (logging != null) {\n                logging.println(\"<<<<< Finished to \" + msg.target + \" \" + msg.callback);\n            }\n\n            // Make sure that during the course of dispatching the\n            // identity of the thread wasn't corrupted.\n            final long newIdent = Binder.clearCallingIdentity();\n            if (ident != newIdent) {\n                Log.wtf(TAG, \"Thread identity changed from 0x\"\n                        + Long.toHexString(ident) + \" to 0x\"\n                        + Long.toHexString(newIdent) + \" while dispatching to \"\n                        + msg.target.getClass().getName() + \" \"\n                        + msg.callback + \" what=\" + msg.what);\n            }\n\n            msg.recycle();\n        }\n    }\n\n```\n> Handler\n```java\n   public Handler(){\n        ······\n        \n        mLooper = Looper.myLooper();\n        \n        ······\n        mQueue = mLooper.mQueue;\n        mCallBack = null;\n    }\n\n    public boolean sendMessageAtTime(Message msg, long uptimeMillis) {\n        MessageQueue queue = mQueue;\n        if (queue == null) {\n            RuntimeException e = new RuntimeException(\n                    this + \" sendMessageAtTime() called with no mQueue\");\n            Log.w(\"Looper\", e.getMessage(), e);\n            return false;\n        }\n        return enqueueMessage(queue, msg, uptimeMillis);\n    }\n    \n    private boolean enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) {\n        msg.target = this;\n        if (mAsynchronous) {\n            msg.setAsynchronous(true);\n        }\n        return queue.enqueueMessage(msg, uptimeMillis);\n    }\n    \n    public void dispatchMessage(Message msg) {\n        if (msg.callback != null) {\n            handleCallback(msg);\n        } else {\n            if (mCallback != null) {\n                if (mCallback.handleMessage(msg)) {\n                    return;\n                }\n            }\n            handleMessage(msg);\n        }\n    }\n```\n\n1. Looper(消息载体)：内部包含一个消息队列也就是MessageQueue，所有的Handler发送的消息都走向这个消息队列，Looper.loop方法，就是一个死循环，不断的从MessageQueue取消息，有消息就处理消息，没有消息就阻塞。\n2. MessageQueue(消息容器)：一个消息队列，可以添加消息。\n3. Handler内部和Looper进行关联，也就是说在Handler中可以找到Looper，找到了Looper也就找到了MessageQueue，在Handler中发送消息其实就是向MessageQueue队列中发送消息，Looper负责接收Handler发送的消息，并直接把消息回传给Handler自己。\n\n### 指定线程处理消息 -- handleMessage\n在Handler构造方法中可指定某个线程Looper来作为本身消息的轮询处理。其中HandlerThread继承自Thread，维护了一个所在线程的一个Looper，handlerThread.getLooper()即可获得子线程的一个Looper。\n```java\n    new Thread(){\n    \t@Override\n    \tpublic void run() {\n    \t\t\n    \t\tHandler handler = new Handler(Looper.getMainLooper()){\n    \t\t\tpublic void handleMessage(android.os.Message msg) {\n    \t\t\t\tSystem.out.println(\"子线程创建的handler在: \" + Thread.currentThread() + \" 接收消息\");\n    \t\t\t};\n    \t\t};\n    \t\t\n    \t\thandler.sendEmptyMessage(0);\n    \t\t\n    \t}\n    }.start();\n    \n    HandlerThread handlerThread = new HandlerThread(\"handler thread\");\n    handlerThread.start();\n    \n    Handler handler = new Handler(handlerThread.getLooper()){\n    \t@Override\n    \tpublic void handleMessage(Message msg) {\n    \t\tSystem.out.println(\"主线程创建的handler在: \" + Thread.currentThread() + \" 接收消息\");\n    \t}\n    };\n    \n    handler.sendEmptyMessage(0);\n```\n\n### Android中更新UI的几种方法\n* runOnUIThread\n```java\n    public final void runOnUiThread(Runnable action) {\n        if (Thread.currentThread() != mUiThread) {\n            mHandler.post(action);\n        } else {\n            action.run();\n        }\n    }\n```\n* handler post\n```java\n    public final boolean post(Runnable r){\n       return sendMessageDelayed(getPostMessage(r), 0);\n    }\n    \n    private static Message getPostMessage(Runnable r) {\n        Message m = Message.obtain();\n        m.callback = r;\n        return m;\n    }\n    \n    public final boolean sendMessageDelayed(Message msg, long delayMillis){\n        if (delayMillis < 0) {\n            delayMillis = 0;\n        }\n        return sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);\n    }\n```\n* handler sendMessage\n```java\n    public final boolean sendMessage(Message msg){\n        return sendMessageDelayed(msg, 0);\n    }\n```\n* view post\n```java\n    /**\n     * <p>Causes the Runnable to be added to the message queue.\n     * The runnable will be run on the user interface thread.</p>\n     *\n     * @param action The Runnable that will be executed.\n     *\n     * @return Returns true if the Runnable was successfully placed in to the\n     *         message queue.  Returns false on failure, usually because the\n     *         looper processing the message queue is exiting.\n     *\n     */\n    public boolean post(Runnable action) {\n        final AttachInfo attachInfo = mAttachInfo;\n        if (attachInfo != null) {\n            return attachInfo.mHandler.post(action);\n        }\n        // Assume that post will succeed later\n        ViewRootImpl.getRunQueue().post(action);\n        return true;\n    }\n```","source":"_posts/handler-detail.md","raw":"title: Android Handler详解\ndate: 2015-06-10 23:00:49\ncategories: Android\ntags: [Android,handler]\n---\n### Android为什么要设计只能通过Handler机制更新UI？\n\n最根本的问题就是解决多线程并发问题，假设如果在一个Activity当中，有多个线程去更新UI,并且没有加锁机制，那将造成界面更新错乱。倘若如果对更新UI的操作都进行加锁处理又将导致性能的下降。\n\n处于对以上问题的考虑，android 给我们提供了一套UI更新的机制，我们只需遵循这样的机制就可以了，不用担心多线程的问题，更新UI的操作都是在主线程的消息队列中去轮询处理的。\n\n### Handler 原理是什么？\nAndroid上一个应用的入口是ActivityThread，和普通的java类一样，入口是一个main方法。在其中会给我们创建一个Looper，创建Looper的过程中会创建一个MessageQueue对象。\n<!-- more -->\n> ActivityThread main()方法\n```java\npublic static void main(String[] args) {  \n        SamplingProfilerIntegration.start();  \n  \n        CloseGuard.setEnabled(false);  \n  \n        Environment.initForCurrentUser();  \n  \n        // Set the reporter for event logging in libcore  \n        EventLogger.setReporter(new EventLoggingReporter());  \n  \n        Process.setArgV0(\"<pre-initialized>\");  \n  \n        Looper.prepareMainLooper();  \n  \n        // 创建ActivityThread实例  \n        ActivityThread thread = new ActivityThread();  \n        thread.attach(false);  \n  \n        if (sMainThreadHandler == null) {  \n            sMainThreadHandler = thread.getHandler();  \n        }  \n  \n        AsyncTask.init();  \n  \n        if (false) {  \n            Looper.myLooper().setMessageLogging(new LogPrinter(Log.DEBUG, \"ActivityThread\"));  \n        }  \n  \n        Looper.loop();  \n  \n        throw new RuntimeException(\"Main thread loop unexpectedly exited\");  \n    }  \n}  \n```\n\n> Looper\n```java\n    public static void prepareMainLooper() {\n        prepare(false);\n        synchronized (Looper.class) {\n            if (sMainLooper != null) {\n                throw new IllegalStateException(\"The main Looper has already been prepared.\");\n            }\n            sMainLooper = myLooper();\n        }\n    }\n    \n    private static void prepare(boolean quitAllowed) {\n        if (sThreadLocal.get() != null) {\n            throw new RuntimeException(\"Only one Looper may be created per thread\");\n        }\n        // 创建Looper对象\n        sThreadLocal.set(new Looper(quitAllowed));\n    }\n    \n    private Looper(boolean quitAllowed) {\n        // 创建MessageQueue 对象\n        mQueue = new MessageQueue(quitAllowed);\n        mRun = true;\n        mThread = Thread.currentThread();\n    }\n    \n    public static Looper myLooper() {\n        return sThreadLocal.get();\n    }\n    \n    public static void loop() {\n        final Looper me = myLooper();\n        if (me == null) {\n            throw new RuntimeException(\"No Looper; Looper.prepare() wasn't called on this thread.\");\n        }\n        final MessageQueue queue = me.mQueue;\n\n        // Make sure the identity of this thread is that of the local process,\n        // and keep track of what that identity token actually is.\n        Binder.clearCallingIdentity();\n        final long ident = Binder.clearCallingIdentity();\n\n        for (;;) {\n            Message msg = queue.next(); // might block\n            if (msg == null) {\n                // No message indicates that the message queue is quitting.\n                return;\n            }\n\n            // This must be in a local variable, in case a UI event sets the logger\n            Printer logging = me.mLogging;\n            if (logging != null) {\n                logging.println(\">>>>> Dispatching to \" + msg.target + \" \" +\n                        msg.callback + \": \" + msg.what);\n            }\n\n            // msg 回传给自己\n            msg.target.dispatchMessage(msg);\n\n            if (logging != null) {\n                logging.println(\"<<<<< Finished to \" + msg.target + \" \" + msg.callback);\n            }\n\n            // Make sure that during the course of dispatching the\n            // identity of the thread wasn't corrupted.\n            final long newIdent = Binder.clearCallingIdentity();\n            if (ident != newIdent) {\n                Log.wtf(TAG, \"Thread identity changed from 0x\"\n                        + Long.toHexString(ident) + \" to 0x\"\n                        + Long.toHexString(newIdent) + \" while dispatching to \"\n                        + msg.target.getClass().getName() + \" \"\n                        + msg.callback + \" what=\" + msg.what);\n            }\n\n            msg.recycle();\n        }\n    }\n\n```\n> Handler\n```java\n   public Handler(){\n        ······\n        \n        mLooper = Looper.myLooper();\n        \n        ······\n        mQueue = mLooper.mQueue;\n        mCallBack = null;\n    }\n\n    public boolean sendMessageAtTime(Message msg, long uptimeMillis) {\n        MessageQueue queue = mQueue;\n        if (queue == null) {\n            RuntimeException e = new RuntimeException(\n                    this + \" sendMessageAtTime() called with no mQueue\");\n            Log.w(\"Looper\", e.getMessage(), e);\n            return false;\n        }\n        return enqueueMessage(queue, msg, uptimeMillis);\n    }\n    \n    private boolean enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) {\n        msg.target = this;\n        if (mAsynchronous) {\n            msg.setAsynchronous(true);\n        }\n        return queue.enqueueMessage(msg, uptimeMillis);\n    }\n    \n    public void dispatchMessage(Message msg) {\n        if (msg.callback != null) {\n            handleCallback(msg);\n        } else {\n            if (mCallback != null) {\n                if (mCallback.handleMessage(msg)) {\n                    return;\n                }\n            }\n            handleMessage(msg);\n        }\n    }\n```\n\n1. Looper(消息载体)：内部包含一个消息队列也就是MessageQueue，所有的Handler发送的消息都走向这个消息队列，Looper.loop方法，就是一个死循环，不断的从MessageQueue取消息，有消息就处理消息，没有消息就阻塞。\n2. MessageQueue(消息容器)：一个消息队列，可以添加消息。\n3. Handler内部和Looper进行关联，也就是说在Handler中可以找到Looper，找到了Looper也就找到了MessageQueue，在Handler中发送消息其实就是向MessageQueue队列中发送消息，Looper负责接收Handler发送的消息，并直接把消息回传给Handler自己。\n\n### 指定线程处理消息 -- handleMessage\n在Handler构造方法中可指定某个线程Looper来作为本身消息的轮询处理。其中HandlerThread继承自Thread，维护了一个所在线程的一个Looper，handlerThread.getLooper()即可获得子线程的一个Looper。\n```java\n    new Thread(){\n    \t@Override\n    \tpublic void run() {\n    \t\t\n    \t\tHandler handler = new Handler(Looper.getMainLooper()){\n    \t\t\tpublic void handleMessage(android.os.Message msg) {\n    \t\t\t\tSystem.out.println(\"子线程创建的handler在: \" + Thread.currentThread() + \" 接收消息\");\n    \t\t\t};\n    \t\t};\n    \t\t\n    \t\thandler.sendEmptyMessage(0);\n    \t\t\n    \t}\n    }.start();\n    \n    HandlerThread handlerThread = new HandlerThread(\"handler thread\");\n    handlerThread.start();\n    \n    Handler handler = new Handler(handlerThread.getLooper()){\n    \t@Override\n    \tpublic void handleMessage(Message msg) {\n    \t\tSystem.out.println(\"主线程创建的handler在: \" + Thread.currentThread() + \" 接收消息\");\n    \t}\n    };\n    \n    handler.sendEmptyMessage(0);\n```\n\n### Android中更新UI的几种方法\n* runOnUIThread\n```java\n    public final void runOnUiThread(Runnable action) {\n        if (Thread.currentThread() != mUiThread) {\n            mHandler.post(action);\n        } else {\n            action.run();\n        }\n    }\n```\n* handler post\n```java\n    public final boolean post(Runnable r){\n       return sendMessageDelayed(getPostMessage(r), 0);\n    }\n    \n    private static Message getPostMessage(Runnable r) {\n        Message m = Message.obtain();\n        m.callback = r;\n        return m;\n    }\n    \n    public final boolean sendMessageDelayed(Message msg, long delayMillis){\n        if (delayMillis < 0) {\n            delayMillis = 0;\n        }\n        return sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);\n    }\n```\n* handler sendMessage\n```java\n    public final boolean sendMessage(Message msg){\n        return sendMessageDelayed(msg, 0);\n    }\n```\n* view post\n```java\n    /**\n     * <p>Causes the Runnable to be added to the message queue.\n     * The runnable will be run on the user interface thread.</p>\n     *\n     * @param action The Runnable that will be executed.\n     *\n     * @return Returns true if the Runnable was successfully placed in to the\n     *         message queue.  Returns false on failure, usually because the\n     *         looper processing the message queue is exiting.\n     *\n     */\n    public boolean post(Runnable action) {\n        final AttachInfo attachInfo = mAttachInfo;\n        if (attachInfo != null) {\n            return attachInfo.mHandler.post(action);\n        }\n        // Assume that post will succeed later\n        ViewRootImpl.getRunQueue().post(action);\n        return true;\n    }\n```","slug":"handler-detail","published":1,"updated":"2015-11-23T14:26:07.677Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cihc1yg2t0000nsc0wc5mnaez"},{"title":"当乐软件详情页实现","date":"2015-06-08T14:43:39.000Z","_content":"[源码下载地址](https://github.com/ngstyle/StickyLayout)\n\n> 基于 [Android 自定义控件 轻松实现360软件详情页](http://blog.csdn.net/lmj623565791/article/details/43649913)\n\n\n![](https://github.com/ngstyle/StickyLayout/raw/master/screenrecord.gif)\n\n","source":"_posts/stickylayout.md","raw":"title: 当乐软件详情页实现\ndate: 2015-06-08 22:43:39\ncategories: Android\ntags: [Android,自定义控件]\n---\n[源码下载地址](https://github.com/ngstyle/StickyLayout)\n\n> 基于 [Android 自定义控件 轻松实现360软件详情页](http://blog.csdn.net/lmj623565791/article/details/43649913)\n\n\n![](https://github.com/ngstyle/StickyLayout/raw/master/screenrecord.gif)\n\n","slug":"stickylayout","published":1,"updated":"2015-11-23T14:26:07.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cihc1yg4h000bnsc0p8cz1s9n"},{"title":"种一棵树最好的时间是十年前，其次是现在","date":"2015-06-05T07:34:26.000Z","_content":"“我每一次挥动胳膊，都可以感觉到肌肉的震颤，我很确信，大重量的卧推一定会让我的胸大肌发育，我知道拼了命的锻炼，真的可以给我带来回报。但是其他很多东西，你没有任何拼命的方向，甚至是拼了命也没用，说不清。我喜欢健身房，喜欢这个地方，就像家一样。”\n\n这个臂围40的哥们慢悠悠的讲这句话的时候，我心里还是咯噔了一下。\n\n故事的剧情简单明了，女朋友刚刚实习，被温柔多金的经理所吸引，抛下了相伴三年的哥们。\n\n按照剧情发展，故事应该是这个卧推110kg的哥们揭露出经理的邪恶与阴险，英勇的从经理手中抢回女朋友从此过上幸福的生活，但是哥们跟我说，比人家差太多了：帅，体贴，父亲是公司大股东，已经给姑娘做好了很多规划……而我从很努力从农村考到县城再到大学，进了学校之后发现自己什么都不懂，不懂人情世故，不懂表达和交流，对这个花花世界其实一无所知，很少问爸妈怕给他们带来更多的烦恼，就像一个傻瓜一样成天骗自己All is well。\n<!-- more -->\n\n我这才明白过来这原来不是一个真爱大战反派的故事，这个故事比北爱还要苦涩，还要直截了当。\n\n“如果哪里真的可以卖命，或者是灵魂还是人格无论什么乱七八糟的东西，请联系我。”哥们和我说他真不是开玩笑，以前他一直觉得自己拼命，是可以走向成功的，现在想想，自己拼了命的成功达到的不过是别人的起跑线，甚至还不一定够得着。如果兔子都拼命奔跑，乌龟还有什么前进的动力？\n\n直到现实重重的拍打在自己的脸上，才知道仰天大笑三声，吐血三升而亡的感觉。\n\n我突然想起以前一条新闻，讲一个女孩子成绩优异，本可以轻松清北，但从小受留学法国的母亲的影响，参加各种社会活动，然后毅然决定放弃高考，申请了哥大并且成功了。新闻下面附了这个女孩子的照片，挺漂亮，这条新闻也受到各界媒体的转载和褒扬，我不带任何仇优心理的又找到了这条给我留下深刻记忆的评论：\n\n“我没有皇城根下的家，也没有留过洋的爸妈。我只能要着牙拼命学习，在千军万马中挤破头，换来一个国内普通的大学。而我还要拼命努力，才能换来一个普通的人生。但这条新闻把千万个我们这种普通家庭却从没放弃努力的孩子，当成了傻瓜。”\n \n “迷茫时为你点一盏灯，沉沦时敲你一棍，困顿时一顿饱餐，甚至直接为你的一生保驾护航。这样的家境下的人大概很难体会到我的一生，我和我女朋友讲过我曾经为了赚生活费住过桥洞，有一种夏虫不能语冰的感觉。‘和那些少爷们不同，我们光是活着就拼尽全了。’我原本以为，像我这种穷人家的娃，拥有更狂妄的野心，但其实，就像青蛙总把井上的天空当作他野心的全部。我现在更加理解了在狼多肉少的时候，小狼怎么样，完全取决于老狼这种定律。”\n\n至少你要在大时代中做个坚强的小人物，至少在狂欢夜做个自由的舞者。这是我的希望","source":"_posts/just-now.md","raw":"title: 种一棵树最好的时间是十年前，其次是现在\ndate: 2015-06-05 15:34:26\ncategories: 心路历程\ntags: 随笔\n---\n“我每一次挥动胳膊，都可以感觉到肌肉的震颤，我很确信，大重量的卧推一定会让我的胸大肌发育，我知道拼了命的锻炼，真的可以给我带来回报。但是其他很多东西，你没有任何拼命的方向，甚至是拼了命也没用，说不清。我喜欢健身房，喜欢这个地方，就像家一样。”\n\n这个臂围40的哥们慢悠悠的讲这句话的时候，我心里还是咯噔了一下。\n\n故事的剧情简单明了，女朋友刚刚实习，被温柔多金的经理所吸引，抛下了相伴三年的哥们。\n\n按照剧情发展，故事应该是这个卧推110kg的哥们揭露出经理的邪恶与阴险，英勇的从经理手中抢回女朋友从此过上幸福的生活，但是哥们跟我说，比人家差太多了：帅，体贴，父亲是公司大股东，已经给姑娘做好了很多规划……而我从很努力从农村考到县城再到大学，进了学校之后发现自己什么都不懂，不懂人情世故，不懂表达和交流，对这个花花世界其实一无所知，很少问爸妈怕给他们带来更多的烦恼，就像一个傻瓜一样成天骗自己All is well。\n<!-- more -->\n\n我这才明白过来这原来不是一个真爱大战反派的故事，这个故事比北爱还要苦涩，还要直截了当。\n\n“如果哪里真的可以卖命，或者是灵魂还是人格无论什么乱七八糟的东西，请联系我。”哥们和我说他真不是开玩笑，以前他一直觉得自己拼命，是可以走向成功的，现在想想，自己拼了命的成功达到的不过是别人的起跑线，甚至还不一定够得着。如果兔子都拼命奔跑，乌龟还有什么前进的动力？\n\n直到现实重重的拍打在自己的脸上，才知道仰天大笑三声，吐血三升而亡的感觉。\n\n我突然想起以前一条新闻，讲一个女孩子成绩优异，本可以轻松清北，但从小受留学法国的母亲的影响，参加各种社会活动，然后毅然决定放弃高考，申请了哥大并且成功了。新闻下面附了这个女孩子的照片，挺漂亮，这条新闻也受到各界媒体的转载和褒扬，我不带任何仇优心理的又找到了这条给我留下深刻记忆的评论：\n\n“我没有皇城根下的家，也没有留过洋的爸妈。我只能要着牙拼命学习，在千军万马中挤破头，换来一个国内普通的大学。而我还要拼命努力，才能换来一个普通的人生。但这条新闻把千万个我们这种普通家庭却从没放弃努力的孩子，当成了傻瓜。”\n \n “迷茫时为你点一盏灯，沉沦时敲你一棍，困顿时一顿饱餐，甚至直接为你的一生保驾护航。这样的家境下的人大概很难体会到我的一生，我和我女朋友讲过我曾经为了赚生活费住过桥洞，有一种夏虫不能语冰的感觉。‘和那些少爷们不同，我们光是活着就拼尽全了。’我原本以为，像我这种穷人家的娃，拥有更狂妄的野心，但其实，就像青蛙总把井上的天空当作他野心的全部。我现在更加理解了在狼多肉少的时候，小狼怎么样，完全取决于老狼这种定律。”\n\n至少你要在大时代中做个坚强的小人物，至少在狂欢夜做个自由的舞者。这是我的希望","slug":"just-now","published":1,"updated":"2015-11-23T14:26:07.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cihc1yg4k000gnsc010sksg88"}],"PostAsset":[],"PostCategory":[{"post_id":"cihc1yg2t0000nsc0wc5mnaez","category_id":"cihc1yg2z0001nsc02ahoopy9","_id":"cihc1yg330004nsc0f8h0i406"},{"post_id":"cihc1yg4h000bnsc0p8cz1s9n","category_id":"cihc1yg2z0001nsc02ahoopy9","_id":"cihc1yg4i000cnsc01lt46e79"},{"post_id":"cihc1yg4k000gnsc010sksg88","category_id":"cihc1yg4l000hnsc037fi2hu8","_id":"cihc1yg4m000knsc01ijcot0x"}],"PostTag":[{"post_id":"cihc1yg2t0000nsc0wc5mnaez","tag_id":"cihc1yg300002nsc0sayy37rr","_id":"cihc1yg330005nsc0ou1r4q4b"},{"post_id":"cihc1yg2t0000nsc0wc5mnaez","tag_id":"cihc1yg320003nsc0qtr4l5y9","_id":"cihc1yg330006nsc0qjlf6u1z"},{"post_id":"cihc1yg4h000bnsc0p8cz1s9n","tag_id":"cihc1yg300002nsc0sayy37rr","_id":"cihc1yg4j000ensc0teyz7nms"},{"post_id":"cihc1yg4h000bnsc0p8cz1s9n","tag_id":"cihc1yg4i000dnsc0d1be3mw2","_id":"cihc1yg4j000fnsc0shbw9reu"},{"post_id":"cihc1yg4k000gnsc010sksg88","tag_id":"cihc1yg4m000insc0vjr1h957","_id":"cihc1yg4m000jnsc0cwmdpfh6"}],"Tag":[{"name":"Android","_id":"cihc1yg300002nsc0sayy37rr"},{"name":"handler","_id":"cihc1yg320003nsc0qtr4l5y9"},{"name":"自定义控件","_id":"cihc1yg4i000dnsc0d1be3mw2"},{"name":"随笔","_id":"cihc1yg4m000insc0vjr1h957"}]}}